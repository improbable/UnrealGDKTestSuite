// Copyright (c) Improbable Worlds Ltd, All Rights Reserved
// Note that this file has been generated automatically
package improbable.unreal.generated;

import "improbable/vector3.schema";
import "improbable/unreal/gdk/core_types.schema";

component UnrealPlayerControllerSingleClientRepData {
	id = 100010;
	UnrealFRotator field_targetviewrotation = 1; // COND_OwnerOnly // ::PlayerController
	improbable.Vector3f field_spawnlocation = 2; // COND_OwnerOnly // ::PlayerController
}
component UnrealPlayerControllerMultiClientRepData {
	id = 100011;
	bool field_bhidden = 1; // COND_None // ::Actor
	bool field_breplicatemovement = 2; // COND_None // ::Actor
	bool field_btearoff = 3; // COND_None // ::Actor
	bool field_bcanbedamaged = 4; // COND_None // ::Actor
	uint32 field_remoterole = 5; // COND_None // ::Actor
	bytes field_replicatedmovement = 6; // COND_SimulatedOrPhysics // ::Actor
	UnrealObjectRef field_attachmentreplication_attachparent = 7; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	improbable.Vector3f field_attachmentreplication_locationoffset = 8; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	improbable.Vector3f field_attachmentreplication_relativescale3d = 9; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealFRotator field_attachmentreplication_rotationoffset = 10; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	string field_attachmentreplication_attachsocket = 11; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_attachmentreplication_attachcomponent = 12; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_owner = 13; // COND_None // ::Actor
	uint32 field_role = 14; // COND_None // ::Actor
	UnrealObjectRef field_instigator = 15; // COND_None // ::Actor
	UnrealObjectRef field_playerstate = 16; // COND_None // ::Controller
	UnrealObjectRef field_pawn = 17; // COND_None // ::Controller
}
component UnrealPlayerControllerMigratableData {
	id = 100012;
	UnrealObjectRef field_acknowledgedpawn = 1;
}
import "improbable/unreal/generated/UnrealPlayerControllerTypes.schema";
import "improbable/unreal/generated/UnrealControllerTypes.schema";

component UnrealPlayerControllerClientRPCs {
	id = 100013;
	event UnrealOnServerStartedVisualLoggerRequest playercontrolleronserverstartedvisuallogger;
	event UnrealClientWasKickedRequest playercontrollerclientwaskicked;
	event UnrealClientVoiceHandshakeCompleteRequest playercontrollerclientvoicehandshakecomplete;
	event UnrealClientUpdateMultipleLevelsStreamingStatusRequest playercontrollerclientupdatemultiplelevelsstreamingstatus;
	event UnrealClientUpdateLevelStreamingStatusRequest playercontrollerclientupdatelevelstreamingstatus;
	event UnrealClientUnmutePlayerRequest playercontrollerclientunmuteplayer;
	event UnrealClientTravelInternalRequest playercontrollerclienttravelinternal;
	event UnrealClientTeamMessageRequest playercontrollerclientteammessage;
	event UnrealClientStopForceFeedbackRequest playercontrollerclientstopforcefeedback;
	event UnrealClientStopCameraShakeRequest playercontrollerclientstopcamerashake;
	event UnrealClientStopCameraAnimRequest playercontrollerclientstopcameraanim;
	event UnrealClientStartOnlineSessionRequest playercontrollerclientstartonlinesession;
	event UnrealClientSpawnCameraLensEffectRequest playercontrollerclientspawncameralenseffect;
	event UnrealClientSetViewTargetRequest playercontrollerclientsetviewtarget;
	event UnrealClientSetSpectatorWaitingRequest playercontrollerclientsetspectatorwaiting;
	event UnrealClientSetHUDRequest playercontrollerclientsethud;
	event UnrealClientSetForceMipLevelsToBeResidentRequest playercontrollerclientsetforcemiplevelstoberesident;
	event UnrealClientSetCinematicModeRequest playercontrollerclientsetcinematicmode;
	event UnrealClientSetCameraModeRequest playercontrollerclientsetcameramode;
	event UnrealClientSetCameraFadeRequest playercontrollerclientsetcamerafade;
	event UnrealClientSetBlockOnAsyncLoadingRequest playercontrollerclientsetblockonasyncloading;
	event UnrealClientReturnToMainMenuWithTextReasonRequest playercontrollerclientreturntomainmenuwithtextreason;
	event UnrealClientReturnToMainMenuRequest playercontrollerclientreturntomainmenu;
	event UnrealClientRetryClientRestartRequest playercontrollerclientretryclientrestart;
	event UnrealClientRestartRequest playercontrollerclientrestart;
	event UnrealClientResetRequest playercontrollerclientreset;
	event UnrealClientRepObjRefRequest playercontrollerclientrepobjref;
	event UnrealClientReceiveLocalizedMessageRequest playercontrollerclientreceivelocalizedmessage;
	event UnrealClientPrestreamTexturesRequest playercontrollerclientprestreamtextures;
	event UnrealClientPrepareMapChangeRequest playercontrollerclientpreparemapchange;
	event UnrealClientPlaySoundAtLocationRequest playercontrollerclientplaysoundatlocation;
	event UnrealClientPlaySoundRequest playercontrollerclientplaysound;
	event UnrealClientPlayForceFeedbackRequest playercontrollerclientplayforcefeedback;
	event UnrealClientPlayCameraShakeRequest playercontrollerclientplaycamerashake;
	event UnrealClientPlayCameraAnimRequest playercontrollerclientplaycameraanim;
	event UnrealClientMutePlayerRequest playercontrollerclientmuteplayer;
	event UnrealClientMessageRequest playercontrollerclientmessage;
	event UnrealClientIgnoreMoveInputRequest playercontrollerclientignoremoveinput;
	event UnrealClientIgnoreLookInputRequest playercontrollerclientignorelookinput;
	event UnrealClientGotoStateRequest playercontrollerclientgotostate;
	event UnrealClientGameEndedRequest playercontrollerclientgameended;
	event UnrealClientForceGarbageCollectionRequest playercontrollerclientforcegarbagecollection;
	event UnrealClientFlushLevelStreamingRequest playercontrollerclientflushlevelstreaming;
	event UnrealClientEndOnlineSessionRequest playercontrollerclientendonlinesession;
	event UnrealClientEnableNetworkVoiceRequest playercontrollerclientenablenetworkvoice;
	event UnrealClientCommitMapChangeRequest playercontrollerclientcommitmapchange;
	event UnrealClientClearCameraLensEffectsRequest playercontrollerclientclearcameralenseffects;
	event UnrealClientCapBandwidthRequest playercontrollerclientcapbandwidth;
	event UnrealClientCancelPendingMapChangeRequest playercontrollerclientcancelpendingmapchange;
	event UnrealClientAddTextureStreamingLocRequest playercontrollerclientaddtexturestreamingloc;
	event UnrealClientSetRotationRequest playercontrollerclientsetrotation;
	event UnrealClientSetLocationRequest playercontrollerclientsetlocation;
}
component UnrealPlayerControllerServerRPCs {
	id = 100014;
	event UnrealServerViewSelfRequest playercontrollerserverviewself;
	event UnrealServerViewPrevPlayerRequest playercontrollerserverviewprevplayer;
	event UnrealServerViewNextPlayerRequest playercontrollerserverviewnextplayer;
	event UnrealServerVerifyViewTargetRequest playercontrollerserververifyviewtarget;
	event UnrealServerUpdateMultipleLevelsVisibilityRequest playercontrollerserverupdatemultiplelevelsvisibility;
	event UnrealServerUpdateLevelVisibilityRequest playercontrollerserverupdatelevelvisibility;
	event UnrealServerUpdateCameraRequest playercontrollerserverupdatecamera;
	event UnrealServerUnmutePlayerRequest playercontrollerserverunmuteplayer;
	event UnrealServerToggleAILoggingRequest playercontrollerservertoggleailogging;
	event UnrealServerShortTimeoutRequest playercontrollerservershorttimeout;
	event UnrealServerSetSpectatorWaitingRequest playercontrollerserversetspectatorwaiting;
	event UnrealServerSetSpectatorLocationRequest playercontrollerserversetspectatorlocation;
	event UnrealServerRestartPlayerRequest playercontrollerserverrestartplayer;
	event UnrealServerPauseRequest playercontrollerserverpause;
	event UnrealServerNotifyLoadedWorldRequest playercontrollerservernotifyloadedworld;
	event UnrealServerMutePlayerRequest playercontrollerservermuteplayer;
	event UnrealServerCheckClientPossessionReliableRequest playercontrollerservercheckclientpossessionreliable;
	event UnrealServerCheckClientPossessionRequest playercontrollerservercheckclientpossession;
	event UnrealServerChangeNameRequest playercontrollerserverchangename;
	event UnrealServerCameraRequest playercontrollerservercamera;
	event UnrealServerAcknowledgePossessionRequest playercontrollerserveracknowledgepossession;
}
