// Copyright (c) Improbable Worlds Ltd, All Rights Reserved
// Note that this file has been generated automatically
package improbable.unreal.generated.samplegamecharacter;

import "improbable/unreal/gdk/core_types.schema";

component SampleGameCharacterSingleClientRepData {
	id = 100022;
}
component SampleGameCharacterMultiClientRepData {
	id = 100023;
	bool field_bhidden = 1; // COND_None // ::Actor
	bool field_breplicatemovement = 2; // COND_None // ::Actor
	bool field_btearoff = 3; // COND_None // ::Actor
	bool field_bcanbedamaged = 4; // COND_None // ::Actor
	uint32 field_remoterole = 5; // COND_None // ::Actor
	bytes field_replicatedmovement = 6; // COND_SimulatedOrPhysicsNoReplay // ::Actor
	UnrealObjectRef field_attachmentreplication_attachparent = 7; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication_locationoffset = 8; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication_relativescale3d = 9; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication_rotationoffset = 10; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	string field_attachmentreplication_attachsocket = 11; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_attachmentreplication_attachcomponent = 12; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_owner = 13; // COND_None // ::Actor
	uint32 field_role = 14; // COND_None // ::Actor
	UnrealObjectRef field_instigator = 15; // COND_None // ::Actor
	UnrealObjectRef field_playerstate = 16; // COND_None // ::Pawn
	uint32 field_remoteviewpitch = 17; // COND_SkipOwner // ::Pawn
	UnrealObjectRef field_controller = 18; // COND_None // ::Pawn
	UnrealObjectRef field_replicatedbasedmovement_movementbase = 19; // COND_SimulatedOnly // BasedMovementInfo::ReplicatedBasedMovement::Character
	string field_replicatedbasedmovement_bonename = 20; // COND_SimulatedOnly // BasedMovementInfo::ReplicatedBasedMovement::Character
	bytes field_replicatedbasedmovement_location = 21; // COND_SimulatedOnly // BasedMovementInfo::ReplicatedBasedMovement::Character
	bytes field_replicatedbasedmovement_rotation = 22; // COND_SimulatedOnly // BasedMovementInfo::ReplicatedBasedMovement::Character
	bool field_replicatedbasedmovement_bserverhasbasecomponent = 23; // COND_SimulatedOnly // BasedMovementInfo::ReplicatedBasedMovement::Character
	bool field_replicatedbasedmovement_brelativerotation = 24; // COND_SimulatedOnly // BasedMovementInfo::ReplicatedBasedMovement::Character
	bool field_replicatedbasedmovement_bserverhasvelocity = 25; // COND_SimulatedOnly // BasedMovementInfo::ReplicatedBasedMovement::Character
	float field_animrootmotiontranslationscale = 26; // COND_SimulatedOnly // ::Character
	float field_replicatedserverlasttransformupdatetimestamp = 27; // COND_SimulatedOnlyNoReplay // ::Character
	uint32 field_replicatedmovementmode = 28; // COND_SimulatedOnly // ::Character
	bool field_biscrouched = 29; // COND_SimulatedOnly // ::Character
	float field_jumpmaxholdtime = 30; // COND_None // ::Character
	int32 field_jumpmaxcount = 31; // COND_None // ::Character
	bool field_reprootmotion_bisactive = 32; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	UnrealObjectRef field_reprootmotion_animmontage = 33; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	float field_reprootmotion_position = 34; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	bytes field_reprootmotion_location = 35; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	bytes field_reprootmotion_rotation = 36; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	UnrealObjectRef field_reprootmotion_movementbase = 37; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	string field_reprootmotion_movementbasebonename = 38; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	bool field_reprootmotion_brelativeposition = 39; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	bool field_reprootmotion_brelativerotation = 40; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	bytes field_reprootmotion_authoritativerootmotion = 41; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	bytes field_reprootmotion_acceleration = 42; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	bytes field_reprootmotion_linearvelocity = 43; // COND_SimulatedOnlyNoReplay // RepRootMotionMontage::RepRootMotion::Character
	list<float> field_testpodarray = 44; // COND_SimulatedOnly // ::SampleGameCharacter
	list<bytes> field_testmixedstructarray = 45; // COND_SimulatedOnly // ::SampleGameCharacter
	list<bytes> field_testpodstructarray = 46; // COND_SimulatedOnly // ::SampleGameCharacter
	list<bytes> field_testnetserializearray = 47; // COND_SimulatedOnly // ::SampleGameCharacter
	UnrealObjectRef field_testmixedstruct_ps = 48; // COND_SimulatedOnly // TestMixedStruct::TestMixedStruct::SampleGameCharacter
	float field_testmixedstruct_fvar = 49; // COND_SimulatedOnly // TestMixedStruct::TestMixedStruct::SampleGameCharacter
	float field_testmixedstruct_ivar = 50; // COND_SimulatedOnly // TestMixedStruct::TestMixedStruct::SampleGameCharacter
	float field_testpodstruct_fvar = 51; // COND_SimulatedOnly // TestPODStruct::TestPODStruct::SampleGameCharacter
	int32 field_testpodstruct_ivar = 52; // COND_SimulatedOnly // TestPODStruct::TestPODStruct::SampleGameCharacter
	double field_testpodstruct_dvar = 53; // COND_SimulatedOnly // TestPODStruct::TestPODStruct::SampleGameCharacter
	UnrealObjectRef field_stablynamedobj = 54; // COND_None // ::SampleGameCharacter
	int32 field_testcarrayreplication0 = 55; // COND_None // ::SampleGameCharacter
	int32 field_testcarrayreplication1 = 56; // COND_None // ::SampleGameCharacter
	int32 field_testcarrayreplication2 = 57; // COND_None // ::SampleGameCharacter
	int32 field_testcarrayreplication3 = 58; // COND_None // ::SampleGameCharacter
	int32 field_testcarrayreplication4 = 59; // COND_None // ::SampleGameCharacter
	int32 field_testcarrayreplication5 = 60; // COND_None // ::SampleGameCharacter
	int32 field_testcarrayreplication6 = 61; // COND_None // ::SampleGameCharacter
	int32 field_testcarrayreplication7 = 62; // COND_None // ::SampleGameCharacter
	uint32 field_test8enum = 63; // COND_None // ::SampleGameCharacter
	uint32 field_test16enum = 64; // COND_None // ::SampleGameCharacter
	uint32 field_test32enum = 65; // COND_None // ::SampleGameCharacter
	int64 field_test64enum = 66; // COND_None // ::SampleGameCharacter
	list<uint32> field_testenumtarray = 67; // COND_None // ::SampleGameCharacter
	uint32 field_testuenum = 68; // COND_None // ::SampleGameCharacter
	list<uint32> field_testuenumtarray = 69; // COND_None // ::SampleGameCharacter
	int32 field_test8int = 70; // COND_None // ::SampleGameCharacter
	int32 field_test16int = 71; // COND_None // ::SampleGameCharacter
	int32 field_test32int = 72; // COND_None // ::SampleGameCharacter
	int64 field_test64int = 73; // COND_None // ::SampleGameCharacter
	uint32 field_test8uint = 74; // COND_None // ::SampleGameCharacter
	uint32 field_test16uint = 75; // COND_None // ::SampleGameCharacter
	uint32 field_test32uint = 76; // COND_None // ::SampleGameCharacter
	uint64 field_test64uint = 77; // COND_None // ::SampleGameCharacter
	float field_testfloat = 78; // COND_None // ::SampleGameCharacter
	double field_testdouble = 79; // COND_None // ::SampleGameCharacter
	list<bytes> field_bararray = 80; // COND_None // ::SampleGameCharacter
	list<bytes> field_testbar_cantreplicatethismember = 81; // COND_None // Bar::TestBar::SampleGameCharacter
	bytes field_testbar_mystruct = 82; // COND_None // Bar::TestBar::SampleGameCharacter
	bytes field_testbar_netserializestruct = 83; // COND_None // Bar::TestBar::SampleGameCharacter
	int32 field_testbookend = 84; // COND_None // ::SampleGameCharacter
}
component SampleGameCharacterMigratableData {
	id = 100024;
}
import "improbable/unreal/generated/UnrealSampleGameCharacterTypes.schema";
import "improbable/unreal/generated/UnrealCharacterTypes.schema";

component SampleGameCharacterClientRPCs {
	id = 100025;
	command UnrealRPCCommandResponse clienttestfunc(samplegamecharacter.ClientTestFuncRequest);
	command UnrealRPCCommandResponse clienttestconstargs(samplegamecharacter.ClientTestConstArgsRequest);
	command UnrealRPCCommandResponse rootmotiondebugclientprintonscreen(character.RootMotionDebugClientPrintOnScreenRequest);
	command UnrealRPCCommandResponse clientveryshortadjustposition(character.ClientVeryShortAdjustPositionRequest);
	command UnrealRPCCommandResponse clientcheatwalk(character.ClientCheatWalkRequest);
	command UnrealRPCCommandResponse clientcheatghost(character.ClientCheatGhostRequest);
	command UnrealRPCCommandResponse clientcheatfly(character.ClientCheatFlyRequest);
	command UnrealRPCCommandResponse clientadjustrootmotionsourceposition(character.ClientAdjustRootMotionSourcePositionRequest);
	command UnrealRPCCommandResponse clientadjustrootmotionposition(character.ClientAdjustRootMotionPositionRequest);
	command UnrealRPCCommandResponse clientadjustposition(character.ClientAdjustPositionRequest);
	command UnrealRPCCommandResponse clientackgoodmove(character.ClientAckGoodMoveRequest);
}
component SampleGameCharacterServerRPCs {
	id = 100026;
	command UnrealRPCCommandResponse testrpc(samplegamecharacter.TestRPCRequest);
	command UnrealRPCCommandResponse servertestfunc(samplegamecharacter.ServerTestFuncRequest);
	command UnrealRPCCommandResponse servermoveold(character.ServerMoveOldRequest);
	command UnrealRPCCommandResponse servermovenobase(character.ServerMoveNoBaseRequest);
	command UnrealRPCCommandResponse servermovedualnobase(character.ServerMoveDualNoBaseRequest);
	command UnrealRPCCommandResponse servermovedualhybridrootmotion(character.ServerMoveDualHybridRootMotionRequest);
	command UnrealRPCCommandResponse servermovedual(character.ServerMoveDualRequest);
	command UnrealRPCCommandResponse servermove(character.ServerMoveRequest);
}
component SampleGameCharacterNetMulticastRPCs {
	id = 100027;
	event samplegamecharacter.TestMulticastRequest testmulticast;
}
