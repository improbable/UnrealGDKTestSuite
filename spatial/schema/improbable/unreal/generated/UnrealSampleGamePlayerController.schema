// Copyright (c) Improbable Worlds Ltd, All Rights Reserved
// Note that this file has been generated automatically
package improbable.unreal.generated.samplegameplayercontroller;

import "improbable/unreal/gdk/core_types.schema";

component UnrealSampleGamePlayerControllerSingleClientRepData {
	id = 100010;
	bytes field_targetviewrotation = 1; // COND_OwnerOnly // ::PlayerController
	bytes field_spawnlocation = 2; // COND_OwnerOnly // ::PlayerController
}
component UnrealSampleGamePlayerControllerMultiClientRepData {
	id = 100011;
	bool field_bhidden = 1; // COND_None // ::Actor
	bool field_breplicatemovement = 2; // COND_None // ::Actor
	bool field_btearoff = 3; // COND_None // ::Actor
	bool field_bcanbedamaged = 4; // COND_None // ::Actor
	uint32 field_remoterole = 5; // COND_None // ::Actor
	bytes field_replicatedmovement = 6; // COND_SimulatedOrPhysics // ::Actor
	UnrealObjectRef field_attachmentreplication_attachparent = 7; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication_locationoffset = 8; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication_relativescale3d = 9; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication_rotationoffset = 10; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	string field_attachmentreplication_attachsocket = 11; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_attachmentreplication_attachcomponent = 12; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_owner = 13; // COND_None // ::Actor
	uint32 field_role = 14; // COND_None // ::Actor
	UnrealObjectRef field_instigator = 15; // COND_None // ::Actor
	UnrealObjectRef field_playerstate = 16; // COND_None // ::Controller
	UnrealObjectRef field_pawn = 17; // COND_None // ::Controller
}
component UnrealSampleGamePlayerControllerMigratableData {
	id = 100012;
}
import "improbable/unreal/generated/UnrealSampleGamePlayerControllerTypes.schema";
import "improbable/unreal/generated/UnrealPlayerControllerTypes.schema";
import "improbable/unreal/generated/UnrealControllerTypes.schema";

component UnrealSampleGamePlayerControllerClientRPCs {
	id = 100013;
	command UnrealRPCCommandResponse samplegameplayercontrolleronserverstartedvisuallogger(playercontroller.UnrealOnServerStartedVisualLoggerRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientwaskicked(playercontroller.UnrealClientWasKickedRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientvoicehandshakecomplete(playercontroller.UnrealClientVoiceHandshakeCompleteRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientupdatemultiplelevelsstreamingstatus(playercontroller.UnrealClientUpdateMultipleLevelsStreamingStatusRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientupdatelevelstreamingstatus(playercontroller.UnrealClientUpdateLevelStreamingStatusRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientunmuteplayer(playercontroller.UnrealClientUnmutePlayerRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclienttravelinternal(playercontroller.UnrealClientTravelInternalRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientteammessage(playercontroller.UnrealClientTeamMessageRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientstopforcefeedback(playercontroller.UnrealClientStopForceFeedbackRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientstopcamerashake(playercontroller.UnrealClientStopCameraShakeRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientstopcameraanim(playercontroller.UnrealClientStopCameraAnimRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientstartonlinesession(playercontroller.UnrealClientStartOnlineSessionRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientspawncameralenseffect(playercontroller.UnrealClientSpawnCameraLensEffectRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsetviewtarget(playercontroller.UnrealClientSetViewTargetRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsetspectatorwaiting(playercontroller.UnrealClientSetSpectatorWaitingRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsethud(playercontroller.UnrealClientSetHUDRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsetforcemiplevelstoberesident(playercontroller.UnrealClientSetForceMipLevelsToBeResidentRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsetcinematicmode(playercontroller.UnrealClientSetCinematicModeRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsetcameramode(playercontroller.UnrealClientSetCameraModeRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsetcamerafade(playercontroller.UnrealClientSetCameraFadeRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsetblockonasyncloading(playercontroller.UnrealClientSetBlockOnAsyncLoadingRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientreturntomainmenuwithtextreason(playercontroller.UnrealClientReturnToMainMenuWithTextReasonRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientreturntomainmenu(playercontroller.UnrealClientReturnToMainMenuRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientretryclientrestart(playercontroller.UnrealClientRetryClientRestartRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientrestart(playercontroller.UnrealClientRestartRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientreset(playercontroller.UnrealClientResetRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientrepobjref(playercontroller.UnrealClientRepObjRefRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientreceivelocalizedmessage(playercontroller.UnrealClientReceiveLocalizedMessageRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientprestreamtextures(playercontroller.UnrealClientPrestreamTexturesRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientpreparemapchange(playercontroller.UnrealClientPrepareMapChangeRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientplaysoundatlocation(playercontroller.UnrealClientPlaySoundAtLocationRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientplaysound(playercontroller.UnrealClientPlaySoundRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientplayforcefeedback(playercontroller.UnrealClientPlayForceFeedbackRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientplaycamerashake(playercontroller.UnrealClientPlayCameraShakeRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientplaycameraanim(playercontroller.UnrealClientPlayCameraAnimRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientmuteplayer(playercontroller.UnrealClientMutePlayerRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientmessage(playercontroller.UnrealClientMessageRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientignoremoveinput(playercontroller.UnrealClientIgnoreMoveInputRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientignorelookinput(playercontroller.UnrealClientIgnoreLookInputRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientgotostate(playercontroller.UnrealClientGotoStateRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientgameended(playercontroller.UnrealClientGameEndedRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientforcegarbagecollection(playercontroller.UnrealClientForceGarbageCollectionRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientflushlevelstreaming(playercontroller.UnrealClientFlushLevelStreamingRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientendonlinesession(playercontroller.UnrealClientEndOnlineSessionRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientenablenetworkvoice(playercontroller.UnrealClientEnableNetworkVoiceRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientcommitmapchange(playercontroller.UnrealClientCommitMapChangeRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientclearcameralenseffects(playercontroller.UnrealClientClearCameraLensEffectsRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientcapbandwidth(playercontroller.UnrealClientCapBandwidthRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientcancelpendingmapchange(playercontroller.UnrealClientCancelPendingMapChangeRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientaddtexturestreamingloc(playercontroller.UnrealClientAddTextureStreamingLocRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsetrotation(controller.UnrealClientSetRotationRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerclientsetlocation(controller.UnrealClientSetLocationRequest);
}
component UnrealSampleGamePlayerControllerServerRPCs {
	id = 100014;
	command UnrealRPCCommandResponse samplegameplayercontrollertestrpc(samplegameplayercontroller.UnrealTestRPCRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverviewself(playercontroller.UnrealServerViewSelfRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverviewprevplayer(playercontroller.UnrealServerViewPrevPlayerRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverviewnextplayer(playercontroller.UnrealServerViewNextPlayerRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserververifyviewtarget(playercontroller.UnrealServerVerifyViewTargetRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverupdatemultiplelevelsvisibility(playercontroller.UnrealServerUpdateMultipleLevelsVisibilityRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverupdatelevelvisibility(playercontroller.UnrealServerUpdateLevelVisibilityRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverupdatecamera(playercontroller.UnrealServerUpdateCameraRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverunmuteplayer(playercontroller.UnrealServerUnmutePlayerRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerservertoggleailogging(playercontroller.UnrealServerToggleAILoggingRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerservershorttimeout(playercontroller.UnrealServerShortTimeoutRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserversetspectatorwaiting(playercontroller.UnrealServerSetSpectatorWaitingRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserversetspectatorlocation(playercontroller.UnrealServerSetSpectatorLocationRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverrestartplayer(playercontroller.UnrealServerRestartPlayerRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverpause(playercontroller.UnrealServerPauseRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerservernotifyloadedworld(playercontroller.UnrealServerNotifyLoadedWorldRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerservermuteplayer(playercontroller.UnrealServerMutePlayerRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerservercheckclientpossessionreliable(playercontroller.UnrealServerCheckClientPossessionReliableRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerservercheckclientpossession(playercontroller.UnrealServerCheckClientPossessionRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserverchangename(playercontroller.UnrealServerChangeNameRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerservercamera(playercontroller.UnrealServerCameraRequest);
	command UnrealRPCCommandResponse samplegameplayercontrollerserveracknowledgepossession(playercontroller.UnrealServerAcknowledgePossessionRequest);
}
component UnrealSampleGamePlayerControllerNetMulticastRPCs {
	id = 100015;
}
