// Copyright (c) Improbable Worlds Ltd, All Rights Reserved
// Note that this file has been generated automatically
package improbable.unreal.generated.samplegameplayercontroller;

import "improbable/unreal/gdk/core_types.schema";

component UnrealSampleGamePlayerControllerSingleClientRepData {
	id = 100010;
	bytes field_targetviewrotation = 1; // COND_OwnerOnly // ::PlayerController
	bytes field_spawnlocation = 2; // COND_OwnerOnly // ::PlayerController
}
component UnrealSampleGamePlayerControllerMultiClientRepData {
	id = 100011;
	bool field_bhidden = 1; // COND_None // ::Actor
	bool field_breplicatemovement = 2; // COND_None // ::Actor
	bool field_btearoff = 3; // COND_None // ::Actor
	bool field_bcanbedamaged = 4; // COND_None // ::Actor
	uint32 field_remoterole = 5; // COND_None // ::Actor
	bytes field_replicatedmovement = 6; // COND_SimulatedOrPhysics // ::Actor
	UnrealObjectRef field_attachmentreplication_attachparent = 7; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication_locationoffset = 8; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication_relativescale3d = 9; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication_rotationoffset = 10; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	string field_attachmentreplication_attachsocket = 11; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_attachmentreplication_attachcomponent = 12; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_owner = 13; // COND_None // ::Actor
	uint32 field_role = 14; // COND_None // ::Actor
	UnrealObjectRef field_instigator = 15; // COND_None // ::Actor
	UnrealObjectRef field_playerstate = 16; // COND_None // ::Controller
	UnrealObjectRef field_pawn = 17; // COND_None // ::Controller
}
component UnrealSampleGamePlayerControllerMigratableData {
	id = 100012;
}
import "improbable/unreal/generated/UnrealSampleGamePlayerControllerTypes.schema";
import "improbable/unreal/generated/UnrealPlayerControllerTypes.schema";
import "improbable/unreal/generated/UnrealControllerTypes.schema";

component UnrealSampleGamePlayerControllerClientRPCs {
	id = 100013;
	command UnrealRPCCommandResponse onserverstartedvisuallogger(playercontroller.UnrealOnServerStartedVisualLoggerRequest);
	command UnrealRPCCommandResponse clientwaskicked(playercontroller.UnrealClientWasKickedRequest);
	command UnrealRPCCommandResponse clientvoicehandshakecomplete(playercontroller.UnrealClientVoiceHandshakeCompleteRequest);
	command UnrealRPCCommandResponse clientupdatemultiplelevelsstreamingstatus(playercontroller.UnrealClientUpdateMultipleLevelsStreamingStatusRequest);
	command UnrealRPCCommandResponse clientupdatelevelstreamingstatus(playercontroller.UnrealClientUpdateLevelStreamingStatusRequest);
	command UnrealRPCCommandResponse clientunmuteplayer(playercontroller.UnrealClientUnmutePlayerRequest);
	command UnrealRPCCommandResponse clienttravelinternal(playercontroller.UnrealClientTravelInternalRequest);
	command UnrealRPCCommandResponse clientteammessage(playercontroller.UnrealClientTeamMessageRequest);
	command UnrealRPCCommandResponse clientstopforcefeedback(playercontroller.UnrealClientStopForceFeedbackRequest);
	command UnrealRPCCommandResponse clientstopcamerashake(playercontroller.UnrealClientStopCameraShakeRequest);
	command UnrealRPCCommandResponse clientstopcameraanim(playercontroller.UnrealClientStopCameraAnimRequest);
	command UnrealRPCCommandResponse clientstartonlinesession(playercontroller.UnrealClientStartOnlineSessionRequest);
	command UnrealRPCCommandResponse clientspawncameralenseffect(playercontroller.UnrealClientSpawnCameraLensEffectRequest);
	command UnrealRPCCommandResponse clientsetviewtarget(playercontroller.UnrealClientSetViewTargetRequest);
	command UnrealRPCCommandResponse clientsetspectatorwaiting(playercontroller.UnrealClientSetSpectatorWaitingRequest);
	command UnrealRPCCommandResponse clientsethud(playercontroller.UnrealClientSetHUDRequest);
	command UnrealRPCCommandResponse clientsetforcemiplevelstoberesident(playercontroller.UnrealClientSetForceMipLevelsToBeResidentRequest);
	command UnrealRPCCommandResponse clientsetcinematicmode(playercontroller.UnrealClientSetCinematicModeRequest);
	command UnrealRPCCommandResponse clientsetcameramode(playercontroller.UnrealClientSetCameraModeRequest);
	command UnrealRPCCommandResponse clientsetcamerafade(playercontroller.UnrealClientSetCameraFadeRequest);
	command UnrealRPCCommandResponse clientsetblockonasyncloading(playercontroller.UnrealClientSetBlockOnAsyncLoadingRequest);
	command UnrealRPCCommandResponse clientreturntomainmenuwithtextreason(playercontroller.UnrealClientReturnToMainMenuWithTextReasonRequest);
	command UnrealRPCCommandResponse clientreturntomainmenu(playercontroller.UnrealClientReturnToMainMenuRequest);
	command UnrealRPCCommandResponse clientretryclientrestart(playercontroller.UnrealClientRetryClientRestartRequest);
	command UnrealRPCCommandResponse clientrestart(playercontroller.UnrealClientRestartRequest);
	command UnrealRPCCommandResponse clientreset(playercontroller.UnrealClientResetRequest);
	command UnrealRPCCommandResponse clientrepobjref(playercontroller.UnrealClientRepObjRefRequest);
	command UnrealRPCCommandResponse clientreceivelocalizedmessage(playercontroller.UnrealClientReceiveLocalizedMessageRequest);
	command UnrealRPCCommandResponse clientprestreamtextures(playercontroller.UnrealClientPrestreamTexturesRequest);
	command UnrealRPCCommandResponse clientpreparemapchange(playercontroller.UnrealClientPrepareMapChangeRequest);
	command UnrealRPCCommandResponse clientplaysoundatlocation(playercontroller.UnrealClientPlaySoundAtLocationRequest);
	command UnrealRPCCommandResponse clientplaysound(playercontroller.UnrealClientPlaySoundRequest);
	command UnrealRPCCommandResponse clientplayforcefeedback(playercontroller.UnrealClientPlayForceFeedbackRequest);
	command UnrealRPCCommandResponse clientplaycamerashake(playercontroller.UnrealClientPlayCameraShakeRequest);
	command UnrealRPCCommandResponse clientplaycameraanim(playercontroller.UnrealClientPlayCameraAnimRequest);
	command UnrealRPCCommandResponse clientmuteplayer(playercontroller.UnrealClientMutePlayerRequest);
	command UnrealRPCCommandResponse clientmessage(playercontroller.UnrealClientMessageRequest);
	command UnrealRPCCommandResponse clientignoremoveinput(playercontroller.UnrealClientIgnoreMoveInputRequest);
	command UnrealRPCCommandResponse clientignorelookinput(playercontroller.UnrealClientIgnoreLookInputRequest);
	command UnrealRPCCommandResponse clientgotostate(playercontroller.UnrealClientGotoStateRequest);
	command UnrealRPCCommandResponse clientgameended(playercontroller.UnrealClientGameEndedRequest);
	command UnrealRPCCommandResponse clientforcegarbagecollection(playercontroller.UnrealClientForceGarbageCollectionRequest);
	command UnrealRPCCommandResponse clientflushlevelstreaming(playercontroller.UnrealClientFlushLevelStreamingRequest);
	command UnrealRPCCommandResponse clientendonlinesession(playercontroller.UnrealClientEndOnlineSessionRequest);
	command UnrealRPCCommandResponse clientenablenetworkvoice(playercontroller.UnrealClientEnableNetworkVoiceRequest);
	command UnrealRPCCommandResponse clientcommitmapchange(playercontroller.UnrealClientCommitMapChangeRequest);
	command UnrealRPCCommandResponse clientclearcameralenseffects(playercontroller.UnrealClientClearCameraLensEffectsRequest);
	command UnrealRPCCommandResponse clientcapbandwidth(playercontroller.UnrealClientCapBandwidthRequest);
	command UnrealRPCCommandResponse clientcancelpendingmapchange(playercontroller.UnrealClientCancelPendingMapChangeRequest);
	command UnrealRPCCommandResponse clientaddtexturestreamingloc(playercontroller.UnrealClientAddTextureStreamingLocRequest);
	command UnrealRPCCommandResponse clientsetrotation(controller.UnrealClientSetRotationRequest);
	command UnrealRPCCommandResponse clientsetlocation(controller.UnrealClientSetLocationRequest);
}
component UnrealSampleGamePlayerControllerServerRPCs {
	id = 100014;
	command UnrealRPCCommandResponse testrpc(samplegameplayercontroller.UnrealTestRPCRequest);
	command UnrealRPCCommandResponse serverviewself(playercontroller.UnrealServerViewSelfRequest);
	command UnrealRPCCommandResponse serverviewprevplayer(playercontroller.UnrealServerViewPrevPlayerRequest);
	command UnrealRPCCommandResponse serverviewnextplayer(playercontroller.UnrealServerViewNextPlayerRequest);
	command UnrealRPCCommandResponse serververifyviewtarget(playercontroller.UnrealServerVerifyViewTargetRequest);
	command UnrealRPCCommandResponse serverupdatemultiplelevelsvisibility(playercontroller.UnrealServerUpdateMultipleLevelsVisibilityRequest);
	command UnrealRPCCommandResponse serverupdatelevelvisibility(playercontroller.UnrealServerUpdateLevelVisibilityRequest);
	command UnrealRPCCommandResponse serverupdatecamera(playercontroller.UnrealServerUpdateCameraRequest);
	command UnrealRPCCommandResponse serverunmuteplayer(playercontroller.UnrealServerUnmutePlayerRequest);
	command UnrealRPCCommandResponse servertoggleailogging(playercontroller.UnrealServerToggleAILoggingRequest);
	command UnrealRPCCommandResponse servershorttimeout(playercontroller.UnrealServerShortTimeoutRequest);
	command UnrealRPCCommandResponse serversetspectatorwaiting(playercontroller.UnrealServerSetSpectatorWaitingRequest);
	command UnrealRPCCommandResponse serversetspectatorlocation(playercontroller.UnrealServerSetSpectatorLocationRequest);
	command UnrealRPCCommandResponse serverrestartplayer(playercontroller.UnrealServerRestartPlayerRequest);
	command UnrealRPCCommandResponse serverpause(playercontroller.UnrealServerPauseRequest);
	command UnrealRPCCommandResponse servernotifyloadedworld(playercontroller.UnrealServerNotifyLoadedWorldRequest);
	command UnrealRPCCommandResponse servermuteplayer(playercontroller.UnrealServerMutePlayerRequest);
	command UnrealRPCCommandResponse servercheckclientpossessionreliable(playercontroller.UnrealServerCheckClientPossessionReliableRequest);
	command UnrealRPCCommandResponse servercheckclientpossession(playercontroller.UnrealServerCheckClientPossessionRequest);
	command UnrealRPCCommandResponse serverchangename(playercontroller.UnrealServerChangeNameRequest);
	command UnrealRPCCommandResponse servercamera(playercontroller.UnrealServerCameraRequest);
	command UnrealRPCCommandResponse serveracknowledgepossession(playercontroller.UnrealServerAcknowledgePossessionRequest);
}
component UnrealSampleGamePlayerControllerNetMulticastRPCs {
	id = 100015;
	event samplegameplayercontroller.UnrealTestMulticastRequest testmulticast;
}
